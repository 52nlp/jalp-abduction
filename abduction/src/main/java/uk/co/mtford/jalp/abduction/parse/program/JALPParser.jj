/*

LL(2) grammar for JALP in prolog style.

ALP -> ((Rule | Denial | Abducible))* EOF
Rule -> Predicate (DEFINES Body)? DOT
Denial -> IC DEFINES Body DOT
Body -> Inferable (COMMA Inferable)*
Abducible -> ABDUCIBLE LBRACKET Predicate (COMMA Predicate)* RBRACKET DOT

Inferable -> PosInferable | NegInferable
PosInferable -> Predicate | Equality | Constraint
NegInferable -> NOT PosInferable

Predicate -> LCASENAME (LBRACKET ParameterList RBRACKET)?
Equality -> Parameter EQUALS Parameter
Constraint -> LessThanConstraint | LessThanEqConstraint | GreaterThanConstraint | GreaterThanEqConstraint | InConstraint
LessThanConstraint -> Term LESSTHAN Term
LessThanEqConstraint -> Term LESSTHANEQ Term
GreaterThanConstraint -> Term GREATERTHAN Term
GreaterThanEqConstraint -> Term GREATERTHANEQ Term
InConstraint -> Term IN Term

ParameterList -> Parameter (COMMA Parameter)*

Term -> (Variable | Constant | List)
Parameter -> (Variable | Constant | Predicate)

List -> LSQBRACKET (VariableList | ConstantList | NestedList)? RSQBRACKET
VariableList -> Variable (COMMA Variable)*
ConstantList -> Constant (COMMA Constant)*
NestedList -> List (COMMA List)*

Variable -> UCASENAME
Constant -> INTEGER | LCASENAME

*/

options {
  LOOKAHEAD = 2;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(JALPParser)

package uk.co.mtford.jalp.abduction.parse.program;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import uk.co.mtford.jalp.abduction.AbductiveFramework;
import uk.co.mtford.jalp.abduction.logic.instance.IInferableInstance;
import uk.co.mtford.jalp.abduction.logic.instance.DenialInstance;
import uk.co.mtford.jalp.abduction.logic.instance.constraints.*;
import uk.co.mtford.jalp.abduction.logic.instance.equalities.EqualityInstance;
import uk.co.mtford.jalp.abduction.Definition;
import uk.co.mtford.jalp.abduction.logic.instance.*;

public class JALPParser {

    public static AbductiveFramework readFromConsole() throws ParseException {
        JALPParser parser = new JALPParser(System.in);
        return parser.AbductiveLogicProgram();
    }

    public static AbductiveFramework readFromFile(String fileName) throws FileNotFoundException, ParseException {
        FileInputStream fstream = new FileInputStream(fileName);
        JALPParser parser = new JALPParser(fstream);
        return parser.AbductiveLogicProgram();
    }

      public static AbductiveFramework readFromString(String string) throws ParseException {
        ByteArrayInputStream inputStream = null;
        byte[] buf = string.getBytes();
        inputStream = new ByteArrayInputStream(buf);
        JALPParser parser = new JALPParser(inputStream);
        return parser.AbductiveLogicProgram();
      }

}

PARSER_END(JALPParser)

SKIP :
{
  " " |
  "\t" |
  "\n" |
  "\r"  
}

TOKEN :
{
  <LBRACKET: "("> |
  <RBRACKET: ")"> |
  <DEFINES: ":-"> |
  <COMMA: ","> |
  <DOT: "."> |
  <EQUALS: "="> |
  <LESSTHAN: "<"> |
  <LESSTHANEQ: "<="> |
  <GREATERTHAN: ">"> |
  <GREATERTHANEQ: ">="> |
  <LSQBRACKET: "["> |
  <RSQBRACKET: "]"> |
  <NOT: "not"> |
  <IC: "ic"> |
  <IN: "in"> |
  <ABDUCIBLE: "abducible"> |
  <LCASENAME: ["a"-"z","0"-"9"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*> |
  <UCASENAME: ["A"-"Z"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*>

}

/* Top level production */
AbductiveFramework AbductiveLogicProgram():
{
	LinkedList<Definition> program = new LinkedList<Definition>();
    LinkedList<DenialInstance> constraints = new LinkedList<DenialInstance>();
    HashMap<String, Integer> abducibles = new HashMap<String, Integer>();

    Definition r;
    DenialInstance d;
    List<PredicateInstance> newAbducibles;
}
{
	(
		r = Rule()
        { 
            program.add(r);
        } |
        d = Denial()
        { constraints.add(d); } |
        newAbducibles = Abducible()
        {
            for (PredicateInstance p:newAbducibles) {
                abducibles.put(p.getName(),p.getNumParams());
            }
        }
	)*
	<EOF>
	{ 
        return new AbductiveFramework(program,abducibles,constraints);
    }
}

Definition Rule():
{
    HashMap<String, VariableInstance> variablesSoFar = new HashMap<String, VariableInstance>();
    
    PredicateInstance head;
    List<IInferableInstance> body = null;
}
{
	head = Predicate(variablesSoFar)
	[
		<DEFINES>
		body = Body(variablesSoFar)
	]
	<DOT>
    { return new Definition(head,body,variablesSoFar); }
}

DenialInstance Denial():
{
    HashMap<String, VariableInstance> variablesSoFar = new HashMap<String, VariableInstance>();

    List<IInferableInstance> body;
    List<VariableInstance> variableList = new LinkedList<VariableInstance>();
}
{
	<IC>
	<DEFINES>
	body = Body(variablesSoFar)
	<DOT>
    {
        for (VariableInstance v:variablesSoFar.values()) {
            variableList.add(v);
        }
        DenialInstance d = new DenialInstance(body,variableList);
        return d;
    }
}

List<IInferableInstance> Body(HashMap<String, VariableInstance> variablesSoFar):
{
    LinkedList<IInferableInstance> body = new LinkedList<IInferableInstance>();
    IInferableInstance inferable;
}
{
	inferable = Inferable(variablesSoFar)
    { body.add(inferable); }
	(
		<COMMA>
		inferable = Inferable(variablesSoFar)
        { body.add(inferable); }
	)*
    { return body; }
}

List<PredicateInstance> Abducible():
{
    LinkedList<PredicateInstance> predicateList = new LinkedList<PredicateInstance>();
    PredicateInstance p;
}
{
    <ABDUCIBLE>
    <LBRACKET>
    p = Predicate(new HashMap<String, VariableInstance>())
    { predicateList.add(p); }
    (
        <COMMA>
        p = Predicate(new HashMap<String, VariableInstance>())
        { predicateList.add(p); }
    )*
    <RBRACKET>
    <DOT>
    { return predicateList; }
}

IInferableInstance Inferable(HashMap<String, VariableInstance> variablesSoFar):
{
    IInferableInstance inferable;
}
{
    inferable = PositiveInferable(variablesSoFar)
    { return inferable; } |
    inferable = NegativeInferable(variablesSoFar)
    { return inferable; } 
}

IInferableInstance PositiveInferable(HashMap<String, VariableInstance> variablesSoFar):
{
    IInferableInstance inferable;
}
{
    inferable = Predicate(variablesSoFar) 
    { return inferable; } |
    inferable = Equality(variablesSoFar)
    { return inferable; } |
    inferable = Constraint(variablesSoFar)
    { return inferable; }
}

NegationInstance NegativeInferable(HashMap<String, VariableInstance> variablesSoFar):
{
    IInferableInstance subformula;
}
{
    <NOT>
    subformula = PositiveInferable(variablesSoFar)
    { return new NegationInstance(subformula); }
}


PredicateInstance Predicate(HashMap<String, VariableInstance> variablesSoFar):
{
    Token t;
    String name;
    List<IUnifiableAtomInstance> parameters = new LinkedList<IUnifiableAtomInstance>();
}
{
	t = <LCASENAME>
    { name = t.image; }
	[	
		<LBRACKET>
		parameters = ParameterList(variablesSoFar)
		<RBRACKET>
	]
    { return new PredicateInstance(name,parameters); }
}

EqualityInstance Equality(HashMap<String, VariableInstance> variablesSoFar):
{
    IUnifiableAtomInstance left;
    IUnifiableAtomInstance right;
}
{
	left = Parameter(variablesSoFar)
	<EQUALS>
	right = Parameter(variablesSoFar)
    { return new EqualityInstance(left,right); }
}

IConstraintInstance Constraint(HashMap<String, VariableInstance> variablesSoFar):
{
    IConstraintInstance instance;
}
{
    instance = LessThanConstraint(variablesSoFar)
    { return instance; } |
    instance = LessThanEqConstraint(variablesSoFar)
    { return instance; } |
    instance = GreaterThanConstraint(variablesSoFar)
    { return instance; } |
    instance = GreaterThanEqConstraint(variablesSoFar)
    { return instance; } |
    instance = InConstraint(variablesSoFar)
    { return instance; }
}

LessThanConstraintInstance LessThanConstraint(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance left;
    ITermInstance right;
}
{
    left = Term(variablesSoFar)
    <LESSTHAN>
    right = Term(variablesSoFar)
    { return new LessThanConstraintInstance(left,right); }
}


LessThanEqConstraintInstance LessThanEqConstraint(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance left;
    ITermInstance right;
}
{
    left = Term(variablesSoFar)
    <LESSTHANEQ>
    right = Term(variablesSoFar)
    { return new LessThanEqConstraintInstance(left,right); }
}


GreaterThanConstraintInstance GreaterThanConstraint(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance left;
    ITermInstance right;
}
{
    left = Term(variablesSoFar)
    <GREATERTHAN>
    right = Term(variablesSoFar)
    { return new GreaterThanConstraintInstance(left,right); }
}

GreaterThanEqConstraintInstance GreaterThanEqConstraint(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance left;
    ITermInstance right;
}
{
    left = Term(variablesSoFar)
    <GREATERTHANEQ>
    right = Term(variablesSoFar)
    { return new GreaterThanEqConstraintInstance(left,right); }
}


InConstraintInstance InConstraint(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance left;
    ITermInstance right;
}
{
    left = Term(variablesSoFar)
    <IN>
    right = Term(variablesSoFar)
    { return new InConstraintInstance(left,right); }
}

ITermInstance Term(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance term;
}
{
    term = Variable(variablesSoFar)
    { return term; } |
    term = Constant()
    { return term; } |
    term = List(variablesSoFar)
    { return term; }
}

List<IUnifiableAtomInstance> ParameterList(HashMap<String, VariableInstance> variablesSoFar):
{
    LinkedList<IUnifiableAtomInstance> params = new LinkedList<IUnifiableAtomInstance>();
    IUnifiableAtomInstance param;
}
{
	[
		param = Parameter(variablesSoFar)
        { params.add(param); }
		(
			<COMMA>
			param = Parameter(variablesSoFar)
            { params.add(param); }
		)*
 	]
    { return params; }
}

IUnifiableAtomInstance Parameter(HashMap<String, VariableInstance> variablesSoFar):
{
    IUnifiableAtomInstance unifiable;
}
{
	(
		unifiable = Variable(variablesSoFar)
        { return unifiable; } |
		unifiable = Constant()
        { return unifiable; } |
		unifiable = Predicate(variablesSoFar)
        { return unifiable; }
	)

}

ListInstance List(HashMap<String, VariableInstance> variablesSoFar):
{
   ListInstance listInstance = new ListInstance();
}
{
    <LSQBRACKET>
    [
        listInstance = VariableList(variablesSoFar) |
        listInstance = ConstantList(variablesSoFar) |
        listInstance = NestedList(variablesSoFar)
    ]
    <RSQBRACKET>
    { return listInstance; }
}

ListInstance<VariableInstance> VariableList(HashMap<String, VariableInstance> variablesSoFar):
{
    ListInstance<VariableInstance> listInstance = new ListInstance<VariableInstance>();
    VariableInstance variableInstance;
}
{
    variableInstance = Variable(variablesSoFar)
    {
        listInstance.getList().add(variableInstance);
    }
    (
       <COMMA>
       variableInstance = Variable(variablesSoFar)
       {
           listInstance.getList().add(variableInstance);
       }
    )*
    { return listInstance; }
}

ListInstance<ConstantInstance> ConstantList(HashMap<String, VariableInstance> variablesSoFar):
{
    ListInstance<ConstantInstance> listInstance = new ListInstance<ConstantInstance>();
    ConstantInstance constantInstance;
}
{
    constantInstance = Constant()
    {
        listInstance.getList().add(constantInstance);
    }
    (
       <COMMA>
       constantInstance = Constant()
       {
           listInstance.getList().add(constantInstance);
       }
    )*
    { return listInstance; }
}

ListInstance<ListInstance> NestedList(HashMap<String, VariableInstance> variablesSoFar):
{
    ListInstance<ListInstance> listInstance = new ListInstance<ListInstance>();
    ListInstance nestedListInstance;
}
{
    nestedListInstance = List(variablesSoFar)
    {
        listInstance.getList().add(nestedListInstance);
    }
    (
       <COMMA>
       nestedListInstance = List(variablesSoFar)
    )*
    { return listInstance; }
}

VariableInstance Variable(HashMap<String, VariableInstance> variablesSoFar):
{
    Token t;
    String name;
}
{
    t = <UCASENAME>
    {
        name = t.image;
        if (variablesSoFar.containsKey(name)) {
            return variablesSoFar.get(name);
        }
        else {
            VariableInstance variable = new VariableInstance(name);
            variablesSoFar.put(name,variable);
            return variable;
        }
    }
}

ConstantInstance Constant():
{
    Token t;
    String name;
}
{
    t = <LCASENAME>
    {
        name = t.image;
        return new ConstantInstance(name);
    }
}
