/*

LL(2) grammar for queries.

Query -> Inferable (COMMA Inferable)* EOF

Inferable -> PosInferable | NegInferable
PosInferable -> Predicate | Equality | InEquality | Constraint
NegInferable -> NOT PosInferable

Predicate -> LCASENAME (LBRACKET ParameterList RBRACKET)?
Equality -> Parameter EQUALS Parameter
InEquality -> Parameter NOTEQUALS Parameter
Constraint -> LessThanConstraint | LessThanEqConstraint | GreaterThanConstraint | GreaterThanEqConstraint | InConstraint
LessThanConstraint -> Term LESSTHAN Term
LessThanEqConstraint -> Term LESSTHANEQ Term
GreaterThanConstraint -> Term GREATERTHAN Term
GreaterThanEqConstraint -> Term GREATERTHANEQ Term
InListConstraint -> Term IN List

Term -> (Variable | Constant | List)
Parameter -> (Variable | Constant | Predicate)

List -> IntegerConstantList | CharConstantList
IntegerConstantList -> LSQBRACKET IntegerConstant ... IntegerConstant RSQBRACKET
CharConstantList -> LSQBRACKET CharConstant (COMMA CharConstant)* RSQBRACKET

Variable -> UCASENAME
IntegerConstant -> INTEGER
CharConstant -> LCASENAME

*/

options {
  LOOKAHEAD = 2;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(JALPQueryParser)

package uk.co.mtford.jalp.abduction.parse.query;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import uk.co.mtford.jalp.abduction.AbductiveFramework;
import uk.co.mtford.jalp.abduction.logic.instance.IInferableInstance;
import uk.co.mtford.jalp.abduction.logic.instance.DenialInstance;
import uk.co.mtford.jalp.abduction.logic.instance.constraints.*;
import uk.co.mtford.jalp.abduction.logic.instance.equalities.EqualityInstance;
import uk.co.mtford.jalp.abduction.Definition;
import uk.co.mtford.jalp.abduction.logic.instance.*;
import uk.co.mtford.jalp.abduction.logic.instance.equalities.InEqualityInstance;
import uk.co.mtford.jalp.abduction.logic.instance.term.*;

public class JALPQueryParser {
 
    public static List<IInferableInstance> readFromString(String string) throws ParseException {
        ByteArrayInputStream inputStream = null;
        byte[] buf = string.getBytes();
        inputStream = new ByteArrayInputStream(buf);
        JALPQueryParser parser = new JALPQueryParser(inputStream);
        return parser.AbductiveLogicQuery();
    }

}

PARSER_END(JALPQueryParser)

SKIP :
{
  " " |
  "\t" |
  "\n" |
  "\r"  
}

TOKEN :
{
  <LBRACKET: "("> |
  <RBRACKET: ")"> |
  <COMMA: ","> |
  <DOT: "."> |
  <EQUALS: "="> |
  <NOTEQUALS: "!="> |
  <LESSTHAN: "<"> |
  <LESSTHANEQ: "<="> |
  <GREATERTHAN: ">"> |
  <GREATERTHANEQ: ">="> |
  <LSQBRACKET: "["> |
  <RSQBRACKET: "]"> |
  <NOT: "not"> |
  <IN: "in"> |
  <INTEGER: ["0"-"9"]> |
  <LCASENAME: ["a"-"z"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*> |
  <UCASENAME: ["A"-"Z"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*>

}

List<IInferableInstance> AbductiveLogicQuery():
{
    LinkedList<IInferableInstance> goals = new LinkedList<IInferableInstance>();
    HashMap<String, VariableInstance> variablesSoFar = new HashMap<String, VariableInstance>();
    IInferableInstance goal;
}
{
	goal = Inferable(variablesSoFar)
    { goals.add(goal); }
	(
		<COMMA>
		goal = Inferable(variablesSoFar)
        { goals.add(goal); }
	)*
    { return goals; }
}

IInferableInstance Inferable(HashMap<String, VariableInstance> variablesSoFar):
{
    IInferableInstance inferable;
}
{
    inferable = PositiveInferable(variablesSoFar)
    { return inferable; } |
    inferable = NegativeInferable(variablesSoFar)
    { return inferable; }
}

IInferableInstance PositiveInferable(HashMap<String, VariableInstance> variablesSoFar):
{
    IInferableInstance inferable;
}
{
    inferable = Predicate(variablesSoFar)
    { return inferable; } |
    inferable = Equality(variablesSoFar)
    { return inferable; } |
    inferable = InEquality(variablesSoFar)
    { return inferable; } |
    inferable = Constraint(variablesSoFar)
    { return inferable; }
}

NegationInstance NegativeInferable(HashMap<String, VariableInstance> variablesSoFar):
{
    IInferableInstance subformula;
}
{
    <NOT>
    subformula = PositiveInferable(variablesSoFar)
    { return new NegationInstance(subformula); }
}


PredicateInstance Predicate(HashMap<String, VariableInstance> variablesSoFar):
{
    Token t;
    String name;
    List<IUnifiableAtomInstance> parameters = new LinkedList<IUnifiableAtomInstance>();
}
{
	t = <LCASENAME>
    { name = t.image; }
	[
		<LBRACKET>
		parameters = ParameterList(variablesSoFar)
		<RBRACKET>
	]
    { return new PredicateInstance(name,parameters); }
}

EqualityInstance Equality(HashMap<String, VariableInstance> variablesSoFar):
{
    IUnifiableAtomInstance left;
    IUnifiableAtomInstance right;
}
{
	left = Parameter(variablesSoFar)
	<EQUALS>
	right = Parameter(variablesSoFar)
    { return new EqualityInstance(left,right); }
}

InEqualityInstance InEquality(HashMap<String, VariableInstance> variablesSoFar):
{
    IUnifiableAtomInstance left;
    IUnifiableAtomInstance right;
}
{
	left = Parameter(variablesSoFar)
	<NOTEQUALS>
	right = Parameter(variablesSoFar)
    { return new InEqualityInstance(left,right); }
}

IConstraintInstance Constraint(HashMap<String, VariableInstance> variablesSoFar):
{
    IConstraintInstance instance;
}
{
    instance = LessThanConstraint(variablesSoFar)
    { return instance; } |
    instance = LessThanEqConstraint(variablesSoFar)
    { return instance; } |
    instance = GreaterThanConstraint(variablesSoFar)
    { return instance; } |
    instance = GreaterThanEqConstraint(variablesSoFar)
    { return instance; } |
    instance = InListConstraint(variablesSoFar)
    { return instance; }
}

LessThanConstraintInstance LessThanConstraint(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance left;
    ITermInstance right;
}
{
    left = Term(variablesSoFar)
    <LESSTHAN>
    right = Term(variablesSoFar)
    { return new LessThanConstraintInstance(left,right); }
}


LessThanEqConstraintInstance LessThanEqConstraint(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance left;
    ITermInstance right;
}
{
    left = Term(variablesSoFar)
    <LESSTHANEQ>
    right = Term(variablesSoFar)
    { return new LessThanEqConstraintInstance(left,right); }
}


GreaterThanConstraintInstance GreaterThanConstraint(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance left;
    ITermInstance right;
}
{
    left = Term(variablesSoFar)
    <GREATERTHAN>
    right = Term(variablesSoFar)
    { return new GreaterThanConstraintInstance(left,right); }
}

GreaterThanEqConstraintInstance GreaterThanEqConstraint(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance left;
    ITermInstance right;
}
{
    left = Term(variablesSoFar)
    <GREATERTHANEQ>
    right = Term(variablesSoFar)
    { return new GreaterThanEqConstraintInstance(left,right); }
}


InListConstraintInstance InListConstraint(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance left;
    ITermInstance right;
}
{
    left = Term(variablesSoFar)
    <IN>
    ((right = CharConstantList(variablesSoFar)
    { return new InConstantListConstraintInstance(left,(CharConstantListInstance)right); }) |
    (right = IntegerConstantList(variablesSoFar)
    { return new InIntegerListConstraintInstance(left,(IntegerConstantListInstance)right); }))
}

ITermInstance Term(HashMap<String, VariableInstance> variablesSoFar):
{
    ITermInstance term;
}
{
    term = Variable(variablesSoFar)
    { return term; } |
    term = Constant()
    { return term; } |
    term = List(variablesSoFar)
    { return term; }
}

List<IUnifiableAtomInstance> ParameterList(HashMap<String, VariableInstance> variablesSoFar):
{
    LinkedList<IUnifiableAtomInstance> params = new LinkedList<IUnifiableAtomInstance>();
    IUnifiableAtomInstance param;
}
{
	[
		param = Parameter(variablesSoFar)
        { params.add(param); }
		(
			<COMMA>
			param = Parameter(variablesSoFar)
            { params.add(param); }
		)*
 	]
    { return params; }
}

IUnifiableAtomInstance Parameter(HashMap<String, VariableInstance> variablesSoFar):
{
    IUnifiableAtomInstance unifiable;
}
{
	(
		unifiable = Variable(variablesSoFar)
        { return unifiable; } |
		unifiable = Constant()
        { return unifiable; } |
		unifiable = Predicate(variablesSoFar)
        { return unifiable; }
	)

}

ListInstance List(HashMap<String, VariableInstance> variablesSoFar):
{
   ListInstance listInstance;
}
{
    (listInstance = IntegerConstantList(variablesSoFar)
    { return listInstance; }) |
    (listInstance = CharConstantList(variablesSoFar)
    { return listInstance; })
}

IntegerConstantListInstance IntegerConstantList(HashMap<String, VariableInstance> variablesSoFar):
{
    IntegerConstantListInstance listInstance = new IntegerConstantListInstance();
    IntegerConstantInstance constantInstance;
}
{
    <LSQBRACKET>
    constantInstance = IntegerConstant()
    {
        listInstance.getList().add(constantInstance);
    }
    (
       <COMMA>
       constantInstance = IntegerConstant()
       {
           listInstance.getList().add(constantInstance);
       }
    )*
    <RSQBRACKET>
    { return listInstance; }
}

CharConstantListInstance CharConstantList(HashMap<String, VariableInstance> variablesSoFar):
{
    CharConstantListInstance listInstance = new CharConstantListInstance();
    CharConstantInstance constantInstance;
}
{
    <LSQBRACKET>
    constantInstance = CharConstant()
    {
        listInstance.getList().add(constantInstance);
    }
    (
       <COMMA>
       constantInstance = CharConstant()
       {
           listInstance.getList().add(constantInstance);
       }
    )*
    <RSQBRACKET>
    { return listInstance; }
}

VariableInstance Variable(HashMap<String, VariableInstance> variablesSoFar):
{
    Token t;
    String name;
}
{
    t = <UCASENAME>
    {
        name = t.image;
        if (variablesSoFar.containsKey(name)) {
            return variablesSoFar.get(name);
        }
        else {
            VariableInstance variable = new VariableInstance(name);
            variablesSoFar.put(name,variable);
            return variable;
        }
    }
}

ConstantInstance Constant():
{
    ConstantInstance constantInstance;
}
{
    constantInstance = IntegerConstant()
    { return constantInstance; } |
    constantInstance = CharConstant()
    { return constantInstance; }
}

IntegerConstantInstance IntegerConstant():
{
    Token t;
    Integer integer;
}
{
    t = <INTEGER>
    {
        integer = Integer.parseInt(t.image);
        return new IntegerConstantInstance(integer);
    }
}

CharConstantInstance CharConstant():
{
    Token t;
    String name;
}
{
    t = <LCASENAME>
    {
        name = t.image;
        return new CharConstantInstance(name);
    }
}
