/*

LL(2) grammar for queries.

Query -> Predicate (COMMA PREDICATE)* EOF
Predicate -> LCASENAME (LBRACKET ParameterList RBRACKET)?
ParameterList -> (Parameter (COMMA Parameter)*)?
Parameter -> (UCASENAME | LCASENAME | Predicate)

*/

options {
  LOOKAHEAD = 2;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(JALPQueryParser)

package uk.co.mtford.jalp.abduction.parse.query;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import uk.co.mtford.jalp.abduction.AbductiveFramework;
import uk.co.mtford.jalp.abduction.logic.instance.DenialInstance;
import uk.co.mtford.jalp.abduction.logic.instance.equalities.EqualityInstance;
import uk.co.mtford.jalp.abduction.Definition;
import uk.co.mtford.jalp.abduction.logic.instance.*;

public class JALPQueryParser {
 
    public static List<PredicateInstance> readFromString(String string) throws ParseException {
        ByteArrayInputStream inputStream = null;
        byte[] buf = string.getBytes();
        inputStream = new ByteArrayInputStream(buf);
        JALPQueryParser parser = new JALPQueryParser(inputStream);
        return parser.AbductiveLogicQuery();
    }

}

PARSER_END(JALPQueryParser)

SKIP :
{
  " " |
  "\t" |
  "\n" |
  "\r"  
}

TOKEN :
{
  <LBRACKET: "("> |
  <RBRACKET: ")"> |
  <COMMA: ","> |
  <LCASENAME: ["a"-"z"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*> |
  <UCASENAME: ["A"-"Z"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*> 
}

List<PredicateInstance> AbductiveLogicQuery():
{
    LinkedList<PredicateInstance> goals = new LinkedList<PredicateInstance>();
    HashMap<String, VariableInstance> variablesSoFar = new HashMap<String, VariableInstance>();
    PredicateInstance goal;
}
{
	goal = Predicate(variablesSoFar)
    { goals.add(goal); }
	(
		<COMMA>
		goal = Predicate(variablesSoFar)
        { goals.add(goal); }
	)*
    { return goals; }
}

PredicateInstance Predicate(HashMap<String, VariableInstance> variablesSoFar):
{
    Token t;
    String name;
    List<IUnifiableAtomInstance> parameters = new LinkedList<IUnifiableAtomInstance>();
}
{
	t = <LCASENAME>
    { name = t.image; }
	[	
		<LBRACKET>
		parameters = ParameterList(variablesSoFar)
		<RBRACKET>
	]
    { return new PredicateInstance(name,parameters); }
}

List<IUnifiableAtomInstance> ParameterList(HashMap<String, VariableInstance> variablesSoFar):
{
    LinkedList<IUnifiableAtomInstance> params = new LinkedList<IUnifiableAtomInstance>();
    IUnifiableAtomInstance param;
}
{
	[
		param = Parameter(variablesSoFar)
        { params.add(param); }
		(
			<COMMA>
			param = Parameter(variablesSoFar)
            { params.add(param); }
		)*
 	]
    { return params; }
}

IUnifiableAtomInstance Parameter(HashMap<String, VariableInstance> variablesSoFar):
{
    Token t;
    PredicateInstance predicate;
    String name;
}
{
	(
		t = <UCASENAME> 
        { 
            name = t.image;
            if (variablesSoFar.containsKey(name)) {
                return variablesSoFar.get(name);
            }
            else {
                VariableInstance variable = new VariableInstance(name);
                variablesSoFar.put(name,variable);
                return variable;
            }
        } | 
		t = <LCASENAME> 
        { 
            name = t.image;
            return new ConstantInstance(name);
        } | 
		predicate = Predicate(variablesSoFar)
        { return predicate; }
	)

}
